local repo = 'https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/'

local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local LocalPlayer = Players.LocalPlayer

-- State variables
local isInfiniteMoneyActive = false
local isInfiniteDiamondsActive = false
local isDepositing = false
local isPurchasingEgg = false
local selectedEggType = "Yeti"  -- Default egg type to purchase
local InfiniteMoneyConnection = nil
local InfiniteDiamondsConnection = nil
local AutoDepositConnection = nil
local AutoGiftsConnection = nil
local EggPurchaseConnection = nil

-- Infinite Money logic
local function infiniteMoney()
    local args = {
        [1] = {
            ["Stone"] = 1,
            ["Granite"] = 1,
            ["CoarseDirt"] = 1,
            ["DiamondOre"] = 999,
            ["Ice"] = 9999
        }
    }

    ReplicatedStorage:WaitForChild("rbxts_include")
        :WaitForChild("node_modules")
        :WaitForChild("@rbxts")
        :WaitForChild("remo")
        :WaitForChild("src")
        :WaitForChild("container")
        :WaitForChild("collect.drops")
        :FireServer(unpack(args))
end

local function infiniteDiamonds()
    local args = {
        [1] = 99
    }

    ReplicatedStorage:WaitForChild("rbxts_include")
        :WaitForChild("node_modules")
        :WaitForChild("@rbxts")
        :WaitForChild("remo")
        :WaitForChild("src")
        :WaitForChild("container")
        :WaitForChild("collect.diamonds")
        :FireServer(unpack(args))
end

-- Auto deposit logic
local function autoDeposit()
    local args = { [1] = 0 }

    ReplicatedStorage:WaitForChild("rbxts_include")
        :WaitForChild("node_modules")
        :WaitForChild("@rbxts")
        :WaitForChild("remo")
        :WaitForChild("src")
        :WaitForChild("container")
        :WaitForChild("processor.process")
        :InvokeServer(unpack(args))
end

-- Auto Gifts logic (Claims every Gift reward from 0 to 12)
local function autoGifts()
    for i = 0, 12 do
        local args = { [1] = tostring(i) }

        -- Call the server function to claim daily rewards
        ReplicatedStorage:WaitForChild("rbxts_include")
            :WaitForChild("node_modules")
            :WaitForChild("@rbxts")
            :WaitForChild("remo")
            :WaitForChild("src")
            :WaitForChild("container")
            :WaitForChild("playtime.claim")
            :InvokeServer(unpack(args))

        print("Claimed Gifts reward: " .. i)
        wait(1)  -- wait for 1 second before claiming next reward
    end
end

local function autoRebirth()
    ReplicatedStorage:WaitForChild("rbxts_include")
    :WaitForChild("node_modules")
    :WaitForChild("@rbxts")
    :WaitForChild("remo")
    :WaitForChild("src")
    :WaitForChild("container")
    :WaitForChild("rebirth")
    :InvokeServer()
end

-- Show Discord Invite link as text
local function showDiscordInvite()
    local discordInviteLink = "https://discord.gg/jcmp39jGDs"
    print("Join our Discord: " .. discordInviteLink)  -- Display the link in the output console
end

-- Purchase Egg logic
local function purchaseEgg(eggType)
    local args = {
        [1] = eggType,   -- Egg name
        [2] = 1          -- Always buy 1 egg of the selected type
    }

    local success, err = pcall(function()
        game:GetService("ReplicatedStorage"):WaitForChild("rbxts_include")
            :WaitForChild("node_modules")
            :WaitForChild("@rbxts")
            :WaitForChild("remo")
            :WaitForChild("src")
            :WaitForChild("container")
            :WaitForChild("eggs.purchase")
            :InvokeServer(unpack(args))
    end)

    if success then
        print("Successfully purchased 1 " .. eggType .. " egg!")
    else
        print("Error purchasing " .. eggType .. " egg: " .. err)
    end
end

-- UI Window
local Window = Library:CreateWindow({
    Title = 'Auralis | Paid Version',
    Center = true,
    AutoShow = true,
})

local Tabs = {
    Main = Window:AddTab('Main'),
    Overworld = Window:AddTab('Overworld'),
    Nether = Window:AddTab('Nether'),
    Extra = Window:AddTab('Extra')
}

local MainInfiniteLeftBox = Tabs.Main:AddLeftGroupbox('Infinite')
local MainAutoRightBox = Tabs.Main:AddRightGroupbox('Auto')
local OverworldHatchRightBox = Tabs.Overworld:AddRightGroupbox('Hatch')
local NetherHatchRightBox = Tabs.Nether:AddRightGroupbox('Hatch')
local ExtraLeftBox = Tabs.Extra:AddLeftGroupbox('Extra')
local ExtraRightBox = Tabs.Extra:AddRightGroupbox('Info')

-- Infinite Money Toggle (under Infinite section)
MainInfiniteLeftBox:AddToggle("InfiniteMoney", {
    Text = "Infinite Money",
    Default = false,
    Tooltip = "Toggle infinite money.",
    Callback = function(value)
        isInfiniteMoneyActive = value

        if isInfiniteMoneyActive then
            if InfiniteMoneyConnection then
                InfiniteMoneyConnection:Disconnect()
            end

            InfiniteMoneyConnection = RunService.Heartbeat:Connect(function()
                pcall(infiniteMoney)
            end)

            print("Infinite Money Enabled")
        else
            if InfiniteMoneyConnection then
                InfiniteMoneyConnection:Disconnect()
                InfiniteMoneyConnection = nil
            end

            print("Infinite Money Disabled")
        end
    end
})

-- Infinite Diamonds Toggle (under Infinite section)
MainInfiniteLeftBox:AddToggle("InfiniteDiamonds", {
    Text = "Infinite Diamonds",
    Default = false,
    Tooltip = "Toggle infinite diamonds.",
    Callback = function(value)
        isInfiniteDiamondsActive = value

        if isInfiniteDiamondsActive then
            if InfiniteDiamondsConnection then
                InfiniteDiamondsConnection:Disconnect()
            end

            InfiniteDiamondsConnection = RunService.Heartbeat:Connect(function()
                pcall(infiniteDiamonds)
            end)

            print("Infinite Diamonds Enabled")
        else
            if InfiniteDiamondsConnection then
                InfiniteDiamondsConnection:Disconnect()
                InfiniteDiamondsConnection = nil
            end

            print("Infinite Diamonds Disabled")
        end
    end
})

-- Auto Deposit Toggle (under Auto section)
MainAutoRightBox:AddToggle("AutoDeposit", {
    Text = "Auto Deposit",
    Default = false,
    Tooltip = "Toggle auto deposit.",
    Callback = function(value)
        isDepositing = value

        if isDepositing then
            if AutoDepositConnection then
                AutoDepositConnection:Disconnect()
            end

            AutoDepositConnection = RunService.Heartbeat:Connect(function()
                pcall(autoDeposit)
            end)

            print("Auto Deposit Started")
        else
            if AutoDepositConnection then
                AutoDepositConnection:Disconnect()
                AutoDepositConnection = nil
            end

            print("Auto Deposit Stopped")
        end
    end
})

-- Auto Daily Toggle (under Auto section)
MainAutoRightBox:AddToggle("AutoGifts", {
    Text = "Auto Gifts",
    Default = false,
    Tooltip = "Toggle auto gifts claim (0 to 12).",
    Callback = function(value)
        if value then
            -- Start the Auto Gifts task
            if AutoGiftsConnection then
                AutoGiftsConnection:Disconnect()
            end

            AutoGiftsConnection = RunService.Heartbeat:Connect(function()
                pcall(autoGifts)
            end)

            print("Auto Gifts Started")
        else
            -- Stop the Auto Gifts task
            if AutoGiftsConnection then
                AutoGiftsConnection:Disconnect()
                AutoGiftsConnection = nil
            end

            print("Auto Gifts Stopped")
        end
    end
})

MainAutoRightBox:AddToggle("AutoRebirth", {
    Text = "Auto Rebirth",
    Default = false,
    Tooltip = "Toggle auto rebirth.",
    Callback = function(value)
        if value then
            -- Start the Auto Gifts task
            if RebirthConnection then
                RebirthConnection:Disconnect()
            end

            AutoRebirthConnection = RunService.Heartbeat:Connect(function()
                pcall(autoRebirth)
            end)

            print("Auto Rebirth Started")
        else
            -- Stop the Auto Gifts task
            if AutoRebirthConnection then
                AutoRebirthConnection:Disconnect()
                AutoRebirthConnection = nil
            end

            print("Auto Rebirth Stopped")
        end
    end
})

-- Egg Type Selection Dropdown (under Hatch section)
OverworldHatchRightBox:AddDropdown("EggType", {
    Text = "Select Egg Type",
    Values = {"Yeti", "Pumpkin", "Sea", "Nature"},  -- List the available egg types
    Default = "Yeti",  -- Default to "Yeti"
    Callback = function(option)
        selectedEggType = option  -- Set the selected egg type
        print("Selected Egg Type: " .. selectedEggType)
    end
})

-- Auto Egg Purchase Toggle (under Auto section)
OverworldHatchRightBox:AddToggle("AutoEggPurchase", {
    Text = "Auto Egg Purchase",
    Default = false,
    Tooltip = "Automatically purchase selected egg type.",
    Callback = function(value)
        isPurchasingEgg = value

        if isPurchasingEgg then
            if EggPurchaseConnection then
                EggPurchaseConnection:Disconnect()
            end

            EggPurchaseConnection = RunService.Heartbeat:Connect(function()
                pcall(purchaseEgg, selectedEggType)  -- Automatically purchase the selected egg type
            end)

            print("Auto Egg Purchase Enabled")
        else
            if EggPurchaseConnection then
                EggPurchaseConnection:Disconnect()
                EggPurchaseConnection = nil
            end

            print("Auto Egg Purchase Disabled")
        end
    end
})

NetherHatchRightBox:AddDropdown("EggType", {
    Text = "Select Egg Type",
    Values = {"Golem", "Witch", "Dragon", "Magma"},  -- List the available egg types
    Default = "Golem",  -- Default to "Yeti"
    Callback = function(option)
        selectedEggType = option  -- Set the selected egg type
        print("Selected Egg Type: " .. selectedEggType)
    end
})

NetherHatchRightBox:AddToggle("AutoEggPurchase", {
    Text = "Auto Egg Purchase",
    Default = false,
    Tooltip = "Automatically purchase selected egg type.",
    Callback = function(value)
        isPurchasingEgg = value

        if isPurchasingEgg then
            if EggPurchaseConnection then
                EggPurchaseConnection:Disconnect()
            end

            EggPurchaseConnection = RunService.Heartbeat:Connect(function()
                pcall(purchaseEgg, selectedEggType)  -- Automatically purchase the selected egg type
            end)

            print("Auto Egg Purchase Enabled")
        else
            if EggPurchaseConnection then
                EggPurchaseConnection:Disconnect()
                EggPurchaseConnection = nil
            end

            print("Auto Egg Purchase Disabled")
        end
    end
})

ExtraRightBox:AddLabel("RNG Dropper Tycoon")

-- Add Discord Invite Button
ExtraRightBox:AddButton("Copy Discord Invite Link", function()
    showDiscordInvite()  -- Display the Discord invite link in the output console for users to copy
end)
